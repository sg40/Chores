---
- name: Deploy Django ChoreChart Application to AWS EC2
  hosts: django_servers
  become: yes
  gather_facts: yes
  vars:
    project_name: "ChoreChart"
    project_repo: "https://github.com/sg40/Chores.git"  # Update this with your actual repo URL
    project_path: "/home/ubuntu/Chores"
    venv_path: "/home/ubuntu/Chores/venv"
    django_user: "ubuntu"
    db_name: "chores_db"
    db_user: "chores_user"
    db_password: "4RtBNEeA"
    gunicorn_socket: "/tmp/gunicorn.sock"
    
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes

    - name: Install required system packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - nginx
          - git
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
          - unzip
        state: present

    - name: Start and enable PostgreSQL service
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL database
      postgresql_db:
        name: "{{ db_name }}"
        state: present
      become_user: postgres

    - name: Create PostgreSQL user
      postgresql_user:
        db: "{{ db_name }}"
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: ALL
        state: present
      become_user: postgres

    - name: Clone Django project repository
      git:
        repo: "{{ project_repo }}"
        dest: "{{ project_path }}"
        version: main  # or master, depending on your default branch
        force: yes
      become_user: "{{ django_user }}"

    - name: Create Python virtual environment
      command: python3 -m venv "{{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"
      become_user: "{{ django_user }}"

    - name: Install Python packages from requirements.txt
      pip:
        requirements: "{{ project_path }}/requirements.txt"
        virtualenv: "{{ venv_path }}"
      become_user: "{{ django_user }}"

    - name: Install gunicorn in virtual environment
      pip:
        name: gunicorn
        virtualenv: "{{ venv_path }}"
      become_user: "{{ django_user }}"

    - name: Create production settings file
      template:
        src: django_settings_prod.py.j2
        dest: "{{ project_path }}/{{ project_name }}/settings_prod.py"
        owner: "{{ django_user }}"
        group: "{{ django_user }}"
        mode: '0644'

    - name: Create static files directory
      file:
        path: "{{ project_path }}/static"
        state: directory
        owner: "{{ django_user }}"
        group: www-data
        mode: '0755'

    - name: Run Django migrations
      django_manage:
        command: migrate
        app_path: "{{ project_path }}"
        virtualenv: "{{ venv_path }}"
        settings: "{{ project_name }}.settings_prod"
      become_user: "{{ django_user }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings_prod"

    - name: Collect Django static files
      django_manage:
        command: collectstatic
        app_path: "{{ project_path }}"
        virtualenv: "{{ venv_path }}"
        settings: "{{ project_name }}.settings_prod"
      become_user: "{{ django_user }}"
      environment:
        DJANGO_SETTINGS_MODULE: "{{ project_name }}.settings_prod"

    - name: Create Gunicorn systemd service file
      template:
        src: gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
        mode: '0644'
      notify:
        - reload systemd
        - restart gunicorn

    - name: Create Nginx site configuration
      template:
        src: nginx_django.conf.j2
        dest: /etc/nginx/sites-available/django
        mode: '0644'
      notify:
        - test nginx config
        - restart nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/django
        dest: /etc/nginx/sites-enabled/django
        state: link
      notify:
        - test nginx config
        - restart nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - test nginx config
        - restart nginx

    - name: Set proper ownership for project directory
      file:
        path: "{{ project_path }}"
        owner: "{{ django_user }}"
        group: www-data
        mode: '0755'
        recurse: yes

    - name: Set proper permissions for home directory
      file:
        path: "/home/{{ django_user }}"
        mode: '0755'

    - name: Start and enable Gunicorn service
      systemd:
        name: gunicorn
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Start and enable Nginx service
      systemd:
        name: nginx
        state: started
        enabled: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart gunicorn
      systemd:
        name: gunicorn
        state: restarted

    - name: test nginx config
      command: nginx -t
      register: nginx_test_result
      failed_when: nginx_test_result.rc != 0

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
